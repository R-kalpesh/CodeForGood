
	private static boolean nextPermutation(int[] array) {
	boolean hasNext = false;
	int i;
	for (i = array.length - 2; i >= 0; i--) {
	    if (array[i] < array[i + 1]) {
		hasNext = true;
		break;
	    }
	}

	if (!hasNext) {// If all elements are arranged from largest to smallest, it means the largest
		       // string
	    return false;
	}

	// Find backward from the subscript of i + 1 (must be monotonically decreasing),
	// find a smallest element in the set larger than array [i]
	int j;
	for (j = i + 1; j < array.length; j++) {
	    if (array[j] <= array[i]) {
		break;
	    }
	}
	j--;

	// Swap these two elements, and then reverse all the elements in i + 1 and later
	// (i + 1, array.length)
	swap(array, i, j);
	reverse(array, i + 1, array.length);

	return true;
	}

	private static void swap(int[] array, int i, int j) {
	int temp = array[i];
	array[i] = array[j];
	array[j] = temp;
	}

	private static void reverse(int[] array, int start, int end) {
	for (int i = start, j = end - 1; i < j; i++, j--) {
	    swap(array, i, j);
	}
	}
	
	
	
	
	
	
	
	
	
	
	{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Competitive Coding": {
		"prefix": "cp",
		"body": [
			"import java.io.*;",
			"import java.util.*;",
			"public class Code {",
			"public static void main(String[] args) {",
			"try {",
			"FastScanner scn = new FastScanner();",
			"int testCase = scn.nextInt();",
			"for (int i = 0; i < testCase; i++) {",
			"}",
			"} catch (Exception e) {",
			"return;",
			"}",
			"}",
			"private static boolean nextPermutation(int[] array) {",
			"boolean hasNext = false; int i;for (i = array.length - 2; i >= 0; i--) {if (array[i] < array[i+1])",
			"{hasNext = true;break;}}",
			"if (!hasNext) { return false;}int j;for (j = i + 1; j < array.length; j++) {if (array[j] <=",
			"array[i]) {break;}}j--;swap(array, i, j);reverse(array, i + 1, array.length);return true;",
			"}private static void swap(int[] array, int i, int j) {int temp = array[i];array[i] = array[j];",
			"array[j] = temp;}private static void reverse(int[] array, int start, int end) {for (int i = start,",
			"j = end - 1; i < j; i++, j--) {swap(array, i, j);}}",
			"}",
			"class FastScanner {",
			"BufferedReader br = new BufferedReader(new InputStreamReader(System.in));",
			"StringTokenizer st = new StringTokenizer(\" \") ;",
			"String next() {",
			"while (!st.hasMoreTokens())",
			"try {",
			"st = new StringTokenizer(br.readLine());",
			"} catch (IOException e) {",
			"e.printStackTrace();",
			"}",
			"return st.nextToken();",
			"}",
			"int nextInt() {",
			"return Integer.parseInt(next());",
			"}",
			"int[] readArray(int n) {",
			"int[] a = new int[n];",
			"for (int i = 0; i < n; i++)",
			"a[i] = nextInt();",
			"return a;",
			"}",
			"long nextLong() {",
			"return Long.parseLong(next());",
			"}",
			"}"
		],
		"description": "cp snipeets"
	}
}
//   public class pair implements Comparable<pair> {
//     int a, b;
//     @Override
//     public int compareTo(pair o) {
//         return (a-o.a);
//     }
//     public pair(int a, int b) {
//         this.a = a;
//         this.b = b;
//     }
// }






public String arrangeWords(String text) {
        String []s = text.toLowerCase().split(" ");
        Arrays.sort(s, (a,b) ->  a.length() - b.length());
        String ans = String.join(" ", s);
        return Character.toUpperCase(ans.charAt(0)) + ans.substring(1);
    }
